import { IBusConnection } from '../../port/connection/connection.interface';
import { IConnectionOptions, IConnectionParams } from '../../../application/port/connection.config.inteface';
import { IConnectionFactory } from '../../port/connection/connection.factory.interface';
import { ICustomLogger } from '../../../utils/custom.logger';
import { ConnectionFactoryRabbitMQ } from './connection.factory.rabbitmq';
import { Queue } from '../bus/queue';
import { Exchange } from '../bus/exchange';
import { ICustomEventEmitter } from '../../../utils/custom.event.emitter';
import { IExchangeOptions } from '../../../application/port/exchange.options.interface';
import { IQueueOptions } from '../../../application/port/queue.options.interface';
export declare class ConnectionRabbitMQ implements IBusConnection {
    private readonly _connectionFactory;
    private readonly _logger;
    private readonly _emitter;
    private _idConnection;
    private _connection?;
    private _configuration;
    private _options;
    private _resourceBus;
    constructor(_connectionFactory: IConnectionFactory, _logger: ICustomLogger, _emitter: ICustomEventEmitter);
    configurations: IConnectionParams | string;
    options: IConnectionOptions;
    idConnection: string;
    readonly isConnected: boolean;
    readonly conn: ConnectionFactoryRabbitMQ | undefined;
    connect(): Promise<void>;
    getExchange(exchangeName: string, option?: IExchangeOptions): Exchange;
    getQueue(queueName: string, option?: IQueueOptions): Queue;
    closeConnection(): Promise<boolean>;
    disposeConnection(): Promise<boolean>;
    on(event: string | symbol, listener: (...args: any[]) => void): void;
}
